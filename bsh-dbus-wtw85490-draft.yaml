esphome:
  name: bsh-dryer
  friendly_name: Dryer

esp32:
  board: esp32-c6-devkitc-1
  variant: esp32c6

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "###"

ota:
  password: "###"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dryer Fallback Hotspot"
    password: "###"

captive_portal:

uart:
  rx_pin: 10
  baud_rate: 9600
  debug:
    direction: RX
    dummy_receiver: true
    after:
      timeout: 20ms
    sequence:
      - lambda: |-
          for (unsigned int i = 0; i < bytes.size(); ) {
            uint8_t* framedata = bytes.data() + i;
            unsigned int framelen = 4 + framedata[0];
            if ((framelen < 6) || (framelen > (bytes.size() - i)) || esphome::crc16be(framedata, framelen, 0x0, 0x1021, false, false)) {
              if (id(bsh_dryer_log).state) {
                ESP_LOGD("D-Bus", "Ignoring byte at %2d with value %02X", i, framedata[0]);
              }
              i++;
              continue;
            }
 
            unsigned int ack = 0;
            std::string res;
            char buf[5];
            for (unsigned int j = 0; j < framelen; j++) {
              sprintf(buf, "%02X", framedata[j]);
              res += buf;
              if (j == (framelen - 3)) {
                for (unsigned int p = framelen; p < 9; p++) { res += "   "; }
              }
              if ((j == 0) || (j == 3) || (j == (framelen - 3))) { res += " | "; }
              else if (j == 1) { res += "."; }
              else if (j == 2) { res += "-"; }
              else { res += " "; }
            }
            res += "(crc=ok) ";
            if (((i + framelen) < bytes.size()) && (framedata[framelen] == ((framedata[1] & 0xF0) | 0x0A))) {
              res += "| ";
              sprintf(buf, "%02X", framedata[framelen]);
              res += buf;
              res += " (ack=ok)";
              ack = 1;
            }
            if (id(bsh_dryer_log).state || (((framedata[1] & 0x0F) != 0x0F) && (framedata[1] != 0x17))) {  // filter out noise
              ESP_LOGD("D-Bus", "Frame at %2d with length %2d: %s", i, framelen, res.c_str());
            }

            switch ((framedata[1] << 16) | (framedata[2] << 8) | framedata[3]) {
              case 0x111006: {
                  std::map<int, std::string> DryProgramMap = {
                      {1, "Cotton Cupboard Dry Plus"},
                      {2, "Cotton Cupboard Dry"},
                      {3, "Cotton Iron Dry"},
                      {4, "Sportswear"},
                      {5, "Towels"},
                      {6, "Mixed Load"},
                      {7, "Timed Dry Warm"},
                      {8, "Timed Dry Cold"},
                      {9, "Wool Finish"},
                      {10, "Down Wear"},
                      {11, "Super Quick 40"},
                      {12, "Shirts"},
                      {13, "Easy Care Iron Dry"},
                      {14, "Easy Care Cupboard Dry"},
                      {15, "Easy Care Cupboard Dry Plus"}
                  };
                  auto program_it = DryProgramMap.find(framedata[4]);
                  if (program_it != DryProgramMap.end()) {
                      id(bsh_dryer_program).publish_state(program_it->second);
                  }

                  std::map<int, std::string> FineAdjustMap = {
                      {6, "Off"},
                      {8, "Low+"},
                      {10, "Med++"},
                      {12, "High+++"},
                  };
                  auto FineAdjust_it = FineAdjustMap.find(framedata[8]);
                  if (FineAdjust_it != FineAdjustMap.end()) {
                      id(bsh_dryer_fine_adjust).publish_state(FineAdjust_it->second);
                  }

                  id(bsh_dryer_low_heat).publish_state(framedata[10] == 0x04);
                  break;
              }
              case 0x211000: {
                  std::map<int, std::string> DryerDoorMap = {
                      {3, "Open"},
                      {6, "Closed"},
                  };
                  auto door_it = DryerDoorMap.find(framedata[5]);
                  if (door_it != DryerDoorMap.end()) {
                      id(bsh_dryer_door).publish_state(door_it->second);
                  }
                  
                  std::map<int, std::string> DryerStatusMap = { 
                      {46, "Running"},
                      // There are probably some other status available, eg Empty lint filter warning.
                  };
                  auto status_it = DryerStatusMap.find(framedata[4]);
                  if (status_it != DryerStatusMap.end()) {
                      id(bsh_dryer_status).publish_state(status_it->second);
                  }
                  break;
              }
              case 0x111001: {
                  if (framedata[4] == 0x23 && framedata[5] == 0x00) {
                      id(bsh_dryer_start_button).publish_state("Pressed");
                      delay(4000); // Delay 4 seconds
                      id(bsh_dryer_start_button).publish_state("Not Pressed");
                  }

                  std::map<int, std::string> DryerReadyMap = {
                      {3, "Ready to Start"},
                  };
                  auto ready_it = DryerReadyMap.find(framedata[4]);
                  if (ready_it != DryerReadyMap.end()) {
                      id(bsh_dryer_status).publish_state(ready_it->second);
                  }
                  break;
              }
              case 0x211002: {
                  uint16_t time_remaining_seconds = (framedata[4] << 8) | framedata[5];
                  // Convert seconds to minutes
                  uint16_t time_remaining_minutes = time_remaining_seconds / 60;
                  // Publish to the sensor
                  id(bsh_dryer_time_remaining).publish_state(time_remaining_minutes);
                  break;
              }
              case 0x211004: {
                  // Dryer Finished - Check if frame data 4, 5, and 6 match the expected values for Dryer Finished
                  if (framedata[4] == 0x05 && framedata[5] == 0x00 && framedata[6] == 0x00) {
                      // Publish "Finished" state to the sensor
                      id(bsh_dryer_status).publish_state("Finished");
                  }
                  break;
              }
            }

            i += framelen;
          }

#ESPHome Sensors Below

switch:
  - platform: template
    id: bsh_dryer_log
    name: "Diagnostic Logger - Log all frames"
    optimistic: true
    icon: mdi:expand-all
    entity_category: config
    restore_mode: ALWAYS_OFF

sensor:
  - platform: template
    id: bsh_dryer_time_remaining
    name: Time Remaining
    icon: mdi:clock-outline
    device_class: duration
    state_class: measurement
    unit_of_measurement: min
    accuracy_decimals: 0

binary_sensor:
  - platform: template
    id: bsh_dryer_low_heat
    name: Low Heat
    icon: mdi:thermometer-low

text_sensor:
  - platform: template
    id: bsh_dryer_program
    name: Drying Program
    icon: mdi:tshirt-crew-outline

  - platform: template
    id: bsh_dryer_status
    name: Dryer Status
    icon: mdi:tumble-dryer

  - platform: template
    id: bsh_dryer_door
    name: Door
    icon: mdi:door

  - platform: template
    id: bsh_dryer_start_button
    name: Start Button
    icon: mdi:button-pointer

  - platform: template
    id: bsh_dryer_fine_adjust
    name: Fine Adjust
    icon: mdi:white-balance-sunny
